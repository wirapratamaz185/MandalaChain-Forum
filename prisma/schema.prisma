// schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username    String?
  email       String       @unique
  password    String
  imageUrl    String? //nullable
  posts       Post[]
  comments    Comment[]
  subscribers Subscriber[]
  bookmarks   Bookmark[]
  communities Community[]
  accounts    Account[]
  sessions    Session[]
  votes       Vote[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String    @db.Uuid
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @db.Uuid
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Community {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  imageUrl    String? //nullable
  is_private  Boolean
  owner_id    String       @db.Uuid
  owner       User         @relation(fields: [owner_id], references: [id])
  subscribers Subscriber[]
  posts       Post[]
  created_at  DateTime     @default(now())
}

model Post {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String     @db.Uuid
  user         User       @relation(fields: [user_id], references: [id])
  title        String
  body         String
  imageUrl     String? //nullable
  vote         Int        @default(0) // Default value for vote count
  community_id String     @db.Uuid
  community    Community  @relation(fields: [community_id], references: [id])
  comments     Comment[]
  created_at   DateTime   @default(now())
  Bookmark     Bookmark[]
  Vote         Vote[]
}

model Comment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id])
  text       String   @db.Text
  post_id    String   @db.Uuid
  post       Post     @relation(fields: [post_id], references: [id])
  created_at DateTime @default(now())
}

model Subscriber {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String    @db.Uuid
  user         User      @relation(fields: [user_id], references: [id])
  created_at   DateTime  @default(now())
  community_id String    @db.Uuid
  community    Community @relation(fields: [community_id], references: [id])
}

model Bookmark {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  post_id    String   @db.Uuid
  post       Post     @relation(fields: [post_id], references: [id])
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
}

model Vote {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id])
  post_id    String   @db.Uuid
  post       Post     @relation(fields: [post_id], references: [id])
  up         Boolean
  created_at DateTime @default(now())

  @@unique([user_id, post_id]) // a user can only vote once on per post
}
